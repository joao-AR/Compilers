#include <iostream>
#include <cctype>  // Biblioteca para funções de caracteres
#include <string>
#include <algorithm>  // Para a função std::find
#include "./h/Verification.h"
#include "./h/Automaton.h"


int main(){
    // entradasAceitas = "+","-","0-9","a","c","e","h","i","r","s","t" 
    // int automato [][14] = {
    // /*estado 0*/ {0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    // /*estado 1*/ {2,0,4,4,0,0,0,7,5,9,0,12,13,0},
    // /*estado 2*/ {0,3,0,0,4,4,0,4,0,0,0,0,0,0},
    // /*estado 3*/ {0,0,0,0,0,0,4,4,0,0,0,0,0,0},
    // /*estado 4*/ {0,0,0,0,0,0,4,4,0,0,0,0,0,0},
    // /*estado 5*/ {0,0,0,0,0,0,0,6,0,0,0,0,0,0},
    // /*estado 6*/ {0,0,0,0,0,0,0,6,0,0,0,0,0,0},
    // /*estado 7*/ {0,0,0,0,0,0,0,7,8,0,0,0,0,0},
    // /*estado 8*/ {0,0,0,0,0,0,0,8,0,0,0,0,0,0},
    // /*estado 9*/ {0,0,0,0,0,0,0,0,0,10,0,0,0,0},
    // /*estado 10*/{0,0,0,0,0,0,10,0,0,0,11,0,0,0},
    // /*estado 11*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    // /*estado 12*/{0,0,0,0,0,0,0,0,0,0,0,12,0,0},
    // /*estado 13*/{0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    // };

    int automato[][41] = {/*input characters
                      B   a   b   c   d   e   f   g   h   i   j   k   l   m   n   o   p   q   r   s   t   u   v   w   x   y   z   0   1   2   3   4   5   6   7   8   9   .   -  \n   O*/    
        /*estado 0*/  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        /*estado 1*/  {12, 4,  4,  4,  4,  4,  4,  4,  4,  2,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  5,  9, 13, 13},
        /*estado 2*/  {0,  4,  4,  4,  4,  4,  3,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  0,  0,  0,  0},
        /*estado 3*/  {0,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  0,  0,  0,  0},
        /*estado 4*/  {0,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  0,  0,  0,  0},
        /*estado 5*/  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  0,  0,  0,  0},
        /*estado 6*/  {0,  0,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  0,  0,  0,  0},
        /*estado 7*/  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8,  0,  0,  0},
        /*estado 8*/  {0,  0,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  0,  0,  0,  0},
        /*estado 9*/  {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0},
        /*estado 10*/ {0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,  0},
        /*estado 11*/ {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        /*estado 12*/ {12, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        /*estado 13*/ {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},

        /*obs: B stands for blank and O stands for other*/
    };

    std::string linha;
    bool haveNextLine;
        while (true) {
            // Tenta ler uma linha da entrada padrão
            if (std::getline(std::cin, linha)) {
                // verificar se tem mais linhas 

                haveNextLine = std::cin.peek() != EOF ?  haveNextLine = true : haveNextLine = false;

                // chamar a funcão que vai andar pelo automato
                analisadorLexico(linha,automato,haveNextLine);
                // Verifica se há mais uma linha disponível
                
            } else {
                //std::cout << "Erro de leitura ou final do arquivo." << std::endl;
                break;
            }
    }


    return 0; 
}


